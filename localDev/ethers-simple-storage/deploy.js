// how to deploy contract w/ js
const ethers = require("ethers");
const fs = require("fs");
require("dotenv").config();

// note: need ethers v5 to follow along w/ vid
async function deploy(wallet) {
  // rmb, to deploy, need ABI and compiled binary code of contract
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );

  // contract factory - object you use to deploy contracts in ethers
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying, please wait...");

  const contract = await contractFactory.deploy({
    gasLimit: 6721975,
    gasPrice: 20000000000,
  });
  // console.log("Contract: ", contract);
  // const transactionReceipt = await contract.deployTransaction.wait(1);
  // // wait for 1 block to be attached -- confirmation
  // console.log("Here is the deployment transaction: ");
  // console.log(contract.deployTransaction);

  // console.log("Here is the transaction receipt: ");
  // console.log(transactionReceipt);

  return contract;
}

// it's possible to deploy contract by just specifying transaction data b/c
// every deployment is a transaction (but not every transaction is a deployment ofc)
// but this ain't ideal since we have to copy paste the binary code as data
// hence the simple `deploy` wrapper above, courtesy of ethers
async function deployWithTxData(wallet) {
  console.log("Let's deploy with only transaction data");
  const tx = {
    nonce: await wallet.getTransactionCount(), // here, this isn't the solution to a mining problem
    // this is a num you only ever use once
    // here, this means a unique num assoc with a tx
    gasPrice: "20000000000",
    gasLimit: "1000000",
    to: null,
    value: 0,
    data: "0x60806040526040518060400160405280600281526020016040518060400160405280600781526020017f5061747269636b0000000000000000000000000000000000000000000000000081525081525060025f820151815f01556020820151816001019081620000709190620002ea565b5050503480156200007f575f80fd5b50620003ce565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200010257607f821691505b602082108103620001185762000117620000bd565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026200017c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200013f565b6200018886836200013f565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620001d2620001cc620001c684620001a0565b620001a9565b620001a0565b9050919050565b5f819050919050565b620001ed83620001b2565b62000205620001fc82620001d9565b8484546200014b565b825550505050565b5f90565b6200021b6200020d565b62000228818484620001e2565b505050565b5b818110156200024f57620002435f8262000211565b6001810190506200022e565b5050565b601f8211156200029e5762000268816200011e565b620002738462000130565b8101602085101562000283578190505b6200029b620002928562000130565b8301826200022d565b50505b505050565b5f82821c905092915050565b5f620002c05f1984600802620002a3565b1980831691505092915050565b5f620002da8383620002af565b9150826002028217905092915050565b620002f58262000086565b67ffffffffffffffff81111562000311576200031062000090565b5b6200031d8254620000ea565b6200032a82828562000253565b5f60209050601f83116001811462000360575f84156200034b578287015190505b620003578582620002cd565b865550620003c6565b601f19841662000370866200011e565b5f5b82811015620003995784890151825560018201915060208501945060208101905062000372565b86831015620003b95784890151620003b5601f891682620002af565b8355505b6001600288020188555050505b505050505050565b610a2280620003dc5f395ff3fe608060405234801561000f575f80fd5b5060043610610086575f3560e01c80636f760f41116100595780636f760f411461010057806377ec2b551461011c5780638bab8dd51461013b5780639e7a13ad1461016b57610086565b80632e64cec11461008a578063471f7cdf146100a85780634f2be91f146100c65780636057361d146100e4575b5f80fd5b61009261019c565b60405161009f91906103cf565b60405180910390f35b6100b06101a4565b6040516100bd91906103cf565b60405180910390f35b6100ce6101a9565b6040516100db91906103cf565b60405180910390f35b6100fe60048036038101906100f99190610423565b6101b1565b005b61011a6004803603810190610115919061058a565b6101ba565b005b61012461023e565b60405161013292919061065e565b60405180910390f35b6101556004803603810190610150919061068c565b6102d5565b60405161016291906103cf565b60405180910390f35b61018560048036038101906101809190610423565b610302565b60405161019392919061065e565b60405180910390f35b5f8054905090565b5f5481565b5f6002905090565b805f8190555050565b6004604051806040016040528083815260200184815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f0155602082015181600101908161021491906108cd565b5050508060018360405161022891906109d6565b9081526020016040518091039020819055505050565b6002805f01549080600101805461025490610700565b80601f016020809104026020016040519081016040528092919081815260200182805461028090610700565b80156102cb5780601f106102a2576101008083540402835291602001916102cb565b820191905f5260205f20905b8154815290600101906020018083116102ae57829003601f168201915b5050505050905082565b6001818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b60048181548110610311575f80fd5b905f5260205f2090600202015f91509050805f01549080600101805461033690610700565b80601f016020809104026020016040519081016040528092919081815260200182805461036290610700565b80156103ad5780601f10610384576101008083540402835291602001916103ad565b820191905f5260205f20905b81548152906001019060200180831161039057829003601f168201915b5050505050905082565b5f819050919050565b6103c9816103b7565b82525050565b5f6020820190506103e25f8301846103c0565b92915050565b5f604051905090565b5f80fd5b5f80fd5b610402816103b7565b811461040c575f80fd5b50565b5f8135905061041d816103f9565b92915050565b5f60208284031215610438576104376103f1565b5b5f6104458482850161040f565b91505092915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61049c82610456565b810181811067ffffffffffffffff821117156104bb576104ba610466565b5b80604052505050565b5f6104cd6103e8565b90506104d98282610493565b919050565b5f67ffffffffffffffff8211156104f8576104f7610466565b5b61050182610456565b9050602081019050919050565b828183375f83830152505050565b5f61052e610529846104de565b6104c4565b90508281526020810184848401111561054a57610549610452565b5b61055584828561050e565b509392505050565b5f82601f8301126105715761057061044e565b5b813561058184826020860161051c565b91505092915050565b5f80604083850312156105a05761059f6103f1565b5b5f83013567ffffffffffffffff8111156105bd576105bc6103f5565b5b6105c98582860161055d565b92505060206105da8582860161040f565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561061b578082015181840152602081019050610600565b5f8484015250505050565b5f610630826105e4565b61063a81856105ee565b935061064a8185602086016105fe565b61065381610456565b840191505092915050565b5f6040820190506106715f8301856103c0565b81810360208301526106838184610626565b90509392505050565b5f602082840312156106a1576106a06103f1565b5b5f82013567ffffffffffffffff8111156106be576106bd6103f5565b5b6106ca8482850161055d565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061071757607f821691505b60208210810361072a576107296106d3565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261078c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610751565b6107968683610751565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6107d16107cc6107c7846103b7565b6107ae565b6103b7565b9050919050565b5f819050919050565b6107ea836107b7565b6107fe6107f6826107d8565b84845461075d565b825550505050565b5f90565b610812610806565b61081d8184846107e1565b505050565b5b81811015610840576108355f8261080a565b600181019050610823565b5050565b601f8211156108855761085681610730565b61085f84610742565b8101602085101561086e578190505b61088261087a85610742565b830182610822565b50505b505050565b5f82821c905092915050565b5f6108a55f198460080261088a565b1980831691505092915050565b5f6108bd8383610896565b9150826002028217905092915050565b6108d6826105e4565b67ffffffffffffffff8111156108ef576108ee610466565b5b6108f98254610700565b610904828285610844565b5f60209050601f831160018114610935575f8415610923578287015190505b61092d85826108b2565b865550610994565b601f19841661094386610730565b5f5b8281101561096a57848901518255600182019150602085019450602081019050610945565b868310156109875784890151610983601f891682610896565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f6109b0826105e4565b6109ba818561099c565b93506109ca8185602086016105fe565b80840191505092915050565b5f6109e182846109a6565b91508190509291505056fea2646970667358221220e79755447f3ec5dce41d12881209f557e73e7e4393db9eee2571da0245b56a8e64736f6c63430008160033",
    chainId: 1337,
  };

  // now need to sign this THEN send to blockchain
  const sendTxResponse = await wallet.sendTransaction(tx);
  await sendTxResponse.wait(1);
}

function createWalletWithDotEnvPK() {
  return new ethers.Wallet(
    process.env.PRIVATE_KEY, // private key for signing and encrypting transactions
    provider
  );
}

async function createWalletWithEncryptedKey() {
  const encryptedJson = fs.readFileSync("././encryptedKey.json", "utf8");
  let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    encryptedJson,
    process.env.PRIVATE_KEY_PASSWORD
  );
  return await wallet.connect(provider);
}

async function main() {
  // http://127.0.0.1:7545
  // can now interact w/ blockchain node w/ just this rpc url w/ axios / fetch
  // but gonna use ethers.js to make the call -- web3.js also does the same thing
  // but we're using ethers.js bc it powers hardhat env
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);

  /*
  instead of creating wallet with PK stored in .env (and risking accidentally pushing .env to github),
  use encrypted json key instead
  */
  // const wallet = createWalletWithDotEnvPK();
  const wallet = await createWalletWithEncryptedKey();

  const contract = await deploy(wallet);
  // await deployWithTxData(wallet);
  const currFavNum = await contract.retrieve(); // `retrieve` defined in ABI and contract
  // here's where the ABI comes in handy
  // code could kinda figure out which funcs exist from the bytecode
  // and you can see whether it successfully parses the ABI out from bytecode with some solidity decompiler
  // but it's easier on the code to just give it the ABI to say what funcs exist
  console.log(`Curr Fav Num: ${currFavNum.toString()}`); // currFavNum will be a BigNum since solidity usu works with big nums (since it can't handle decimals) which js can't handle

  const txRes = await contract.store("7");
  const txReceipt = await txRes.wait(1);

  const updatedFavNum = await contract.retrieve();
  console.log(`Updated favorite number: ${updatedFavNum}`);
}

main()
  .then(() => process.exit(0))
  .catch((err) => {
    console.error(err);
    process.exit(1);
  });

/*
rpc url
remote procedure call URL
connection to blockchain node that someone is running
lets ppl hit API to interact with that blockchain node
API specified at playground.open-rpc.org

can run your own blockchain node at sth like go-ethereum
*/
